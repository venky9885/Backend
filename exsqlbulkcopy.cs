        private async Task BulkInsertClassificationIntoTemp(SqlConnection con, IList<Core.Employee> employees)
        {
            try
            {
                _logger.BulkInsertClassificationIntoTempStarted();
                var activity = OpenTelemetry.ActivitySource.StartActivity(nameof(BulkInsertClassificationIntoTemp));
                activity?.Start();
                var classifications = employees.SelectMany(_ => _.EmployeeClassifications);
                var filteredClassifications = classifications.Where(_ => _.ClassificationId > 0 && _.EmployeeId == 0);
                var employeeClassifications = filteredClassifications.Select(_ => new
                {
                    _.TempEmployeeId,
                    _.ClassificationId,
                    _.ClassificationCodeId,
                    _.ClassificationName,
                    Code= _.ClassificationCodeId != 0 ? _.Code:null, 
                    EffectiveStartDate = _.ClassificationCodeId != 0 ? _.EffectiveStartDate : null,
                    _.EffectiveEndDate,
                    _.FileUploadId,
                    _.IsCodeExist,
                    _.UploadedThrough,
                    _.IsEndDateCalculated,
                    CreatedBy = _userId,
                    CreatedOn = DateTime.Now,
                    _.ModifiedBy,
                    _.DeletedBy,
                    _.IsDeleted
                });
                using (var bcp = new SqlBulkCopy(con))
                {
                    using (var reader = ObjectReader.Create(employeeClassifications))
                    {
                        bcp.BatchSize = 5000;
                        bcp.EnableStreaming = true;
                        bcp.BulkCopyTimeout = 0;
                        bcp.DestinationTableName = $"[{_connectionString.DestinationSchema}].[TempEmployeeClassificationDetails]";

                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("TempEmployeeId", "TempEmployeeId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationId", "ClassificationId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationCodeId", "ClassificationCodeId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationName", "ClassificationTypeName"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("Code", "ClassificationCode"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("EffectiveStartDate", "EffectiveStartDate"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("EffectiveEndDate", "EffectiveEndDate"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("FileUploadId", "FileUploadId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsCodeExist", "IsCodeExist"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("UploadedThrough", "UploadedThrough"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsEndDateCalculated", "IsEndDateAutoGenerated"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("CreatedBy", "CreatedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("CreatedOn", "CreatedOn"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ModifiedBy", "ModifiedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("DeletedBy", "DeletedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsDeleted", "IsDeleted"));
                        await bcp.WriteToServerAsync(reader);
                    }
                }
                
              
               
                activity?.Stop();
                _logger.BulkInsertClassificationIntoTempEnded();
            }
            catch (Exception e)
            {
                _logger.ExceptionOccuredBulkInsertClassificationIntoTemp(e);
                throw;
            }

        }
