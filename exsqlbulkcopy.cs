       // Enterprise example
 private async Task BulkInsertClassificationIntoTemp(SqlConnection con, IList<Core.Employee> employees)
        {
            try
            {
                _logger.BulkInsertClassificationIntoTempStarted();
                var activity = OpenTelemetry.ActivitySource.StartActivity(nameof(BulkInsertClassificationIntoTemp));
                activity?.Start();
                var classifications = employees.SelectMany(_ => _.EmployeeClassifications);
                var filteredClassifications = classifications.Where(_ => _.ClassificationId > 0 && _.EmployeeId == 0);
                var employeeClassifications = filteredClassifications.Select(_ => new
                {
                    _.TempEmployeeId,
                    _.ClassificationId,
                    _.ClassificationCodeId,
                    _.ClassificationName,
                    Code= _.ClassificationCodeId != 0 ? _.Code:null, 
                    EffectiveStartDate = _.ClassificationCodeId != 0 ? _.EffectiveStartDate : null,
                    _.EffectiveEndDate,
                    _.FileUploadId,
                    _.IsCodeExist,
                    _.UploadedThrough,
                    _.IsEndDateCalculated,
                    CreatedBy = _userId,
                    CreatedOn = DateTime.Now,
                    _.ModifiedBy,
                    _.DeletedBy,
                    _.IsDeleted
                });
                using (var bcp = new SqlBulkCopy(con))
                {
                    using (var reader = ObjectReader.Create(employeeClassifications))
                    {
                        bcp.BatchSize = 5000;
                        bcp.EnableStreaming = true;
                        bcp.BulkCopyTimeout = 0;
                        bcp.DestinationTableName = $"[{_connectionString.DestinationSchema}].[TempEmployeeClassificationDetails]";

                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("TempEmployeeId", "TempEmployeeId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationId", "ClassificationId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationCodeId", "ClassificationCodeId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ClassificationName", "ClassificationTypeName"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("Code", "ClassificationCode"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("EffectiveStartDate", "EffectiveStartDate"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("EffectiveEndDate", "EffectiveEndDate"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("FileUploadId", "FileUploadId"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsCodeExist", "IsCodeExist"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("UploadedThrough", "UploadedThrough"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsEndDateCalculated", "IsEndDateAutoGenerated"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("CreatedBy", "CreatedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("CreatedOn", "CreatedOn"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("ModifiedBy", "ModifiedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("DeletedBy", "DeletedBy"));
                        bcp.ColumnMappings.Add(new SqlBulkCopyColumnMapping("IsDeleted", "IsDeleted"));
                        await bcp.WriteToServerAsync(reader);
                    }
                }
                
              
               
                activity?.Stop();
                _logger.BulkInsertClassificationIntoTempEnded();
            }
            catch (Exception e)
            {
                _logger.ExceptionOccuredBulkInsertClassificationIntoTemp(e);
                throw;
            }

        }

// chatgpt example

using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static void Main(string[] args)
    {
        // Create a DataTable and define its schema
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("Id", typeof(int));
        dataTable.Columns.Add("Name", typeof(string));
        dataTable.Columns.Add("Age", typeof(int));

        // Populate the DataTable with some sample data
        dataTable.Rows.Add(1, "John Doe", 30);
        dataTable.Rows.Add(2, "Jane Smith", 25);
        dataTable.Rows.Add(3, "Sam Brown", 35);

        // Define the SQL Server connection string
        string connectionString = "your_connection_string_here";

        // Perform the bulk copy operation
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
            {
                // Set the destination table name
                bulkCopy.DestinationTableName = "dbo.YourDestinationTable";

                try
                {
                    // Map the columns from the source DataTable to the destination table
                    bulkCopy.ColumnMappings.Add("Id", "Id");
                    bulkCopy.ColumnMappings.Add("Name", "Name");
                    bulkCopy.ColumnMappings.Add("Age", "Age");

                    // Perform the bulk copy
                    bulkCopy.WriteToServer(dataTable);

                    Console.WriteLine("Bulk copy operation completed successfully.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error during bulk copy: " + ex.Message);
                }
            }
        }
    }
}

